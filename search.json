[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to magrene","title":"Contributing to magrene","text":"outlines propose change magrene. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to magrene","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to magrene","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to magrene","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"almeidasilvaf/magrene\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to magrene","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to magrene","text":"Please note magrene project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with magrene","title":"Getting help with magrene","text":"Thanks using magrene! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with magrene","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with magrene","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with magrene","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/magrene.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to magrene","text":"Network motifs building blocks complex networks, can interpreted small genetic circuits. Identifying counting motifs gene regulatory networks can reveal important aspects evolution transcriptional regulation. particular, can used explore impact gene duplication rewiring regulatory interactions (Mottes et al. 2021). magrene aims identify analyze motifs (duplicated) gene regulatory networks better comprehend role gene duplication network evolution. figure shows networks motifs users can identify magrene. Network motifs functions identify . Shaded boxes indicate paralogs. Regulators targets indicated purple green, respectively. Arrows indicate directed regulatory interactions, dashed lines indicate protein-protein interaction.","code":""},{"path":"/articles/magrene.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to magrene","text":"can install magrene : , can load package :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {       install.packages(\"BiocManager\")   }  BiocManager::install(\"magrene\") library(magrene) set.seed(123) # for reproducibility"},{"path":"/articles/magrene.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Introduction to magrene","text":"vignette, use three example data sets: gma_grn: gene regulatory network inferred BioNERO (Almeida-Silva Venancio 2022) using soybean RNA-seq data Soybean Expression Atlas (Machado et al. 2020). gma_ppi: protein-protein interaction (PPI) network soybean obtained STRING database (Szklarczyk et al. 2021), filtered contain physical interactions confidence score > 0.4. gma_paralogs: Soybean paralogous gene pairs derived whole-genome, tandem, proximal, transposed, dispersed duplications (WGD, TD, PD, TRD, DD, respectively). data set obtained Almeida-Silva et al. (2020). Networks represented edge lists. Let’s take look data.","code":"data(gma_grn) head(gma_grn) #>                  Node1           Node2     Weight #> 615572 Glyma.20G042000 Glyma.13G027300 0.09219597 #> 177435 Glyma.06G225200 Glyma.04G205700 0.09054177 #> 208602 Glyma.09G278100 Glyma.05G084800 0.08846030 #> 190115 Glyma.18G039200 Glyma.05G002100 0.08382400 #> 78998  Glyma.01G075800 Glyma.02G221200 0.08271081 #> 870271 Glyma.09G231700 Glyma.18G220700 0.08208945  data(gma_ppi) head(gma_ppi) #>                node1           node2 #> 4971 Glyma.19G213200 Glyma.01G004300 #> 4985 Glyma.14G061100 Glyma.01G004300 #> 4995 Glyma.03G179000 Glyma.01G004300 #> 5021 Glyma.03G097900 Glyma.01G004300 #> 5037 Glyma.07G047700 Glyma.01G004300 #> 5053 Glyma.19G051900 Glyma.01G004300  data(gma_paralogs) head(gma_paralogs) #>        duplicate1      duplicate2 type #> 1 Glyma.01G007200 Glyma.01G007300   TD #> 2 Glyma.01G007400 Glyma.01G007500   TD #> 3 Glyma.01G011500 Glyma.01G011600   TD #> 4 Glyma.01G012100 Glyma.01G012200   TD #> 5 Glyma.01G015200 Glyma.01G015300   TD #> 6 Glyma.01G020600 Glyma.01G020700   TD"},{"path":"/articles/magrene.html","id":"finding-motifs","dir":"Articles","previous_headings":"","what":"Finding motifs","title":"Introduction to magrene","text":"Motifs can found using find_* motifs, shown Figure 1. function returns character vector motifs, motif character representation. Let’s demonstrate work. sake demonstration, use WGD-derived paralogs. GRN motifs, use smaller subset edge list.","code":"# Include only WGD-derived paralogs paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2]  # Keep only the top 30k edges of the GRN, remove \"Weight\" variable grn <- gma_grn[1:30000, 1:2]"},{"path":"/articles/magrene.html","id":"ppi-v","dir":"Articles","previous_headings":"Finding motifs","what":"PPI V","title":"Introduction to magrene","text":"PPI V motifs paralogous proteins share interaction partner. find , use find_ppi_v(). character representation PPI V motifs : \\[ \\text{paralog1-partner-paralog2} \\]","code":"# Find PPI V motifs ppi_v <- find_ppi_v(gma_ppi, paralogs) head(ppi_v) #> [1] \"Glyma.19G213200-Glyma.01G004300-Glyma.03G216600\" #> [2] \"Glyma.07G034300-Glyma.01G004300-Glyma.08G207800\" #> [3] \"Glyma.14G101700-Glyma.01G004300-Glyma.06G061100\" #> [4] \"Glyma.12G028500-Glyma.01G004300-Glyma.11G103700\" #> [5] \"Glyma.19G189600-Glyma.01G004300-Glyma.03G189300\" #> [6] \"Glyma.15G006700-Glyma.01G004300-Glyma.07G029200\""},{"path":"/articles/magrene.html","id":"v","dir":"Articles","previous_headings":"Finding motifs","what":"V","title":"Introduction to magrene","text":"V motifs paralogous regulators regulate target. motifs can created regulator undergoes small-scale duplication. find , use find_v(). character representation V motifs : \\[ \\text{regulator->target<-regulator} \\]","code":"# Find V motifs v <- find_v(grn, paralogs) head(v) #> [1] \"Glyma.01G177200<-Glyma.16G128800->Glyma.02G058700\" #> [2] \"Glyma.01G177200<-Glyma.08G362400->Glyma.02G058700\" #> [3] \"Glyma.01G177200<-Glyma.02G103700->Glyma.02G058700\" #> [4] \"Glyma.01G177200<-Glyma.09G152400->Glyma.02G058700\" #> [5] \"Glyma.01G177200<-Glyma.20G151800->Glyma.02G058700\" #> [6] \"Glyma.01G177200<-Glyma.08G020300->Glyma.02G058700\""},{"path":"/articles/magrene.html","id":"lambda","dir":"Articles","previous_headings":"Finding motifs","what":"Lambda","title":"Introduction to magrene","text":"Lambda motifs opposite V motifs: single regulator regulates two target genes paralogous. motifs can created ancestral target gene undergoes small-scale duplication. find use find_lambda(). character representation lambda motifs : \\[ \\text{target1<-regulator->target2} \\]","code":"lambda <- find_lambda(grn, paralogs) head(lambda) #> [1] \"Glyma.01G132800<-Glyma.07G126500->Glyma.03G035400\" #> [2] \"Glyma.01G205300<-Glyma.07G126500->Glyma.05G064600\" #> [3] \"Glyma.01G205300<-Glyma.08G227000->Glyma.05G064600\" #> [4] \"Glyma.01G205300<-Glyma.07G128700->Glyma.05G064600\" #> [5] \"Glyma.01G205300<-Glyma.07G087900->Glyma.05G064600\" #> [6] \"Glyma.01G205300<-Glyma.19G022200->Glyma.05G064600\""},{"path":"/articles/magrene.html","id":"delta","dir":"Articles","previous_headings":"Finding motifs","what":"Delta","title":"Introduction to magrene","text":"Delta motifs pretty similar lambda motifs, take protein-protein interactions targets account. Thus, represented regulator regulates two targets interact protein level. can created evolutionary mechanism lambda motifs. find , use find_delta(). character representation delta motifs : \\[ \\text{target1<-regulator->target2} \\] find delta motifs, two options: Pass PPI edge list + vector previously identified lambda motifs (recommended). Pass PPI edge list + GRN edge list + paralogs data frame. option, find_delta() find lambda motifs first, use lambda vector find delta motifs. identified lambda motifs beforehand, way faster pass lambda vector find_delta(), don’t double work.","code":"# Find delta motifs from lambda motifs delta <- find_delta(edgelist_ppi = gma_ppi, lambda_vec = lambda) head(delta) #> [1] \"Glyma.10G242600<-Glyma.04G221800->Glyma.20G151500\""},{"path":"/articles/magrene.html","id":"bifan","dir":"Articles","previous_headings":"Finding motifs","what":"Bifan","title":"Introduction to magrene","text":"Bifan motifs complex: represented two paralogous regulators regulate set two paralogous targets. can created ancestral regulator ancestral target duplicated small-scale duplications, genome undergoes whole-genome duplication event. find motifs, use find_bifan(). character representation bifan motifs : \\[ \\text{regulator1,regulator2->target1,target2} \\] hood, find_bifan() find lambda motifs involving targets check regulators paralogs. Thus, identified lambda motifs beforehand, much faster simply give find_bifan(), doesn’t find .","code":"# Find bifans from lambda motifs bifan <- find_bifan(paralogs = paralogs, lambda_vec = lambda) head(bifan) #> [1] \"Glyma.01G177200,Glyma.02G058700->Glyma.09G152400,Glyma.20G151800\""},{"path":"/articles/magrene.html","id":"counting-motifs-and-evaluating-significance","dir":"Articles","previous_headings":"","what":"Counting motifs and evaluating significance","title":"Introduction to magrene","text":"motifs simple character vectors, one can count frequencies base R length() function. example, let’s count frequency motif example data set: However, unless another data set can compare frequencies, counting enough. need evaluate significance motif frequencies. One way comparing observed frequencies null distribution generated counting motifs N (e.g., 1000) simulated networks 1. magrene allows generate null distributions motif frequencies motif type function generate_nulls(). generating null distributions takes bit time, demonstrate generate_nulls() 5 permutations . rule thumb, probably want N >= 1000. can see, output generate_nulls() list numeric vectors frequency motif type simulated networks2. can use null distribution calculate Z-scores observed frequencies, defined : \\[ Z = \\frac{ n_{observed} - \\bar{n}_{null} }{ \\sigma_{null} } \\] calculate Z-scores, can use function calculate_Z(). input, need give list observed frequencies list nulls. , load pre-computed null distributions N = 100. Now Z-scores, can use cut-choice define significance.","code":"count_df <- data.frame(     Motif = c(\"PPI V\", \"V\", \"Lambda\", \"Delta\", \"Bifan\"),     Count = c(         length(ppi_v), length(v), length(lambda), length(delta), length(bifan)     ) )  count_df #>    Motif Count #> 1  PPI V  1521 #> 2      V   112 #> 3 Lambda   163 #> 4  Delta     1 #> 5  Bifan     1 generate_nulls(grn, paralogs, gma_ppi, n = 5) #> $lambda #> lambda lambda lambda lambda lambda  #>     80     93     84     77     94  #>  #> $delta #> delta delta delta delta delta  #>     2     2     2     4     0  #>  #> $V #>   V   V   V   V   V  #> 146 148 120 128 114  #>  #> $PPI_V #> PPI_V PPI_V PPI_V PPI_V PPI_V  #>   183   195   160   196   185  #>  #> $bifan #> bifan bifan bifan bifan bifan  #>     0     0     0     0     0 # Load null distros data(nulls) head(nulls) #> $lambda #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     76     84     80     88     77     83     81     85     83     79     89  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     77     87     78     88     82     87     70     89     82     78     78  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     93     75     69     92     86     95     78     90     86     95     94  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     80    100     93     92    100     79     71     83     92     74     78  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>    103     89     91     84     85     89     78     81     71     89     83  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>    103     84    101     93     98     77     95     88     78     98     86  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     70     82     82     78     75     86    100     83     96     78     93  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     94     82     65     85     83     83     74    100     87     78     78  #> lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda lambda  #>     94     84     97     82     90    113     81     76     96     88     87  #> lambda  #>     91  #>  #> $delta #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     1     4     2     8     6     5     3     0     1     7     2     1     3  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     1     2     1     2     1     2     3     7     1     4     4     3     1  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     3     3     3     4     3     2     1     2     2     6     7     4     1  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     2     5     1     1     0     1     2     6     6     6     9     2     2  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     3     4     3     3     4     4     4     3     2     1     2     8     7  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     4     4     4     1     3     2     7     4     2     2     4     5     6  #> delta delta delta delta delta delta delta delta delta delta delta delta delta  #>     3     2     3     2     4     3     3     1     2     1     2     2     7  #> delta delta delta delta delta delta delta delta delta  #>     0     4     4     3     1     1     5     3     2  #>  #> $V #>   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  #> 133 131 136 130 123 112 126 117 124 130 128 141 111 115 132 137 129 139 151 134  #>   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  #>  99 133 133 123 127 128 141 109 141 140 136 102 114 126 136 120 144 132 127 122  #>   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  #> 142 129 114 139 136 129 153 150 139 148 113 106 132 143 139 129 147 119 140 125  #>   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  #> 126 121 119 134 142 145 117 135 127 133 111 133 136 132 130 106 132 123 140 130  #>   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  #> 128 131 127 138 129 132 126 121 120 115 137 123 140 131 110 133 149 129 139 149  #>  #> $PPI_V #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   198   178   179   191   173   172   210   192   219   192   178   194   159  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   188   193   186   182   202   166   190   192   178   189   176   189   161  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   178   199   186   172   178   171   196   199   195   207   190   188   163  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   170   162   186   192   184   207   198   201   199   186   201   169   178  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   192   180   175   192   192   178   183   184   179   195   177   185   187  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   173   205   191   185   192   174   175   195   193   188   201   191   182  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   190   209   193   199   183   186   194   181   191   199   187   201   197  #> PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V PPI_V  #>   201   182   200   180   169   204   200   198   185  #>  #> $bifan #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     1     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0     0     0     0     0  #> bifan bifan bifan bifan bifan bifan bifan bifan bifan  #>     0     0     0     0     0     0     0     0     0  # Create list of observed frequencies observed <- list(     lambda = length(lambda),      bifan = length(bifan),      V = length(v),     PPI_V = length(ppi_v),     delta = length(delta) ) calculate_Z(observed, nulls) #>     lambda      delta          V      PPI_V      bifan  #>   8.856408  -1.068636  -1.560671 113.300559   9.900000"},{"path":"/articles/magrene.html","id":"evaluting-interaction-similarity","dir":"Articles","previous_headings":"","what":"Evaluting interaction similarity","title":"Introduction to magrene","text":"Finally, another interesting pattern may want analyze interaction similarity paralogous gene pairs. Previous studies demonstrated Sorensen-Dice similarity suitable index interaction similarity (Defoort, Van de Peer, Carretero-Paulet 2019; Mottes et al. 2021), defined : \\[ S(,B) = \\frac{2 \\left| \\cap B \\right|}{ \\left|\\right| + \\left| B \\right|} \\] B interacting partners nodes B. calculate Sorensen-Dice similarity paralogous gene pairs, can use function sd_similarity(). Let’s demonstrate calculating similarity paralogs PPI network.","code":"sim <- sd_similarity(gma_ppi, paralogs) head(sim) #>            duplicate1      duplicate2 sorensen_dice #> 11631 Glyma.01G004300 Glyma.05G223800             1 #> 11696 Glyma.01G205300 Glyma.05G064600             1 #> 11706 Glyma.01G207700 Glyma.05G061400             1 #> 12157 Glyma.01G004300 Glyma.08G030900             1 #> 12803 Glyma.01G207700 Glyma.11G034700             1 #> 13298 Glyma.01G163300 Glyma.16G123100             1  summary(sim$sorensen_dice) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.2200  1.0000  1.0000  0.9812  1.0000  1.0000"},{"path":"/articles/magrene.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Introduction to magrene","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2022-08-29 #>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package      * version date (UTC) lib source #>  BiocManager    1.30.18 2022-05-18 [1] RSPM (R 4.1.0) #>  BiocParallel   1.30.3  2022-06-05 [1] Bioconductor #>  BiocStyle    * 2.24.0  2022-04-26 [1] Bioconductor #>  bookdown       0.28    2022-08-09 [1] RSPM (R 4.1.0) #>  bslib          0.4.0   2022-07-16 [2] RSPM (R 4.2.0) #>  cachem         1.0.6   2021-08-19 [2] CRAN (R 4.2.0) #>  cli            3.3.0   2022-04-25 [2] RSPM (R 4.2.0) #>  codetools      0.2-18  2020-11-04 [3] CRAN (R 4.2.1) #>  desc           1.4.1   2022-03-06 [2] CRAN (R 4.2.0) #>  digest         0.6.29  2021-12-01 [2] CRAN (R 4.2.0) #>  evaluate       0.16    2022-08-09 [2] RSPM (R 4.2.0) #>  fastmap        1.1.0   2021-01-25 [2] CRAN (R 4.2.0) #>  fs             1.5.2   2021-12-08 [2] CRAN (R 4.2.0) #>  highr          0.9     2021-04-16 [2] CRAN (R 4.2.0) #>  htmltools      0.5.3   2022-07-18 [2] RSPM (R 4.2.0) #>  jquerylib      0.1.4   2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite       1.8.0   2022-02-22 [2] CRAN (R 4.2.0) #>  knitr          1.40    2022-08-24 [2] RSPM (R 4.2.0) #>  magrene      * 0.99.1  2022-08-29 [1] Bioconductor #>  magrittr       2.0.3   2022-03-30 [2] CRAN (R 4.2.0) #>  memoise        2.0.1   2021-11-26 [2] CRAN (R 4.2.0) #>  pkgdown        2.0.6   2022-07-16 [2] RSPM (R 4.2.0) #>  purrr          0.3.4   2020-04-17 [2] CRAN (R 4.2.0) #>  R6             2.5.1   2021-08-19 [2] CRAN (R 4.2.0) #>  ragg           1.2.2   2022-02-21 [2] RSPM (R 4.2.0) #>  rlang          1.0.4   2022-07-12 [2] RSPM (R 4.2.0) #>  rmarkdown      2.16    2022-08-24 [2] RSPM (R 4.2.0) #>  rprojroot      2.0.3   2022-04-02 [2] CRAN (R 4.2.0) #>  sass           0.4.2   2022-07-16 [2] RSPM (R 4.2.0) #>  sessioninfo    1.2.2   2021-12-06 [2] RSPM (R 4.2.0) #>  stringi        1.7.8   2022-07-11 [2] RSPM (R 4.2.0) #>  stringr        1.4.1   2022-08-20 [2] RSPM (R 4.2.0) #>  systemfonts    1.0.4   2022-02-11 [2] RSPM (R 4.2.0) #>  textshaping    0.3.6   2021-10-13 [2] RSPM (R 4.2.0) #>  xfun           0.32    2022-08-10 [2] RSPM (R 4.2.0) #>  yaml           2.3.5   2022-02-21 [2] CRAN (R 4.2.0) #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Van de Peer Y (2022). magrene: Motif Analysis Gene Regulatory Networks. R package version 0.99.1, https://github.com/almeidasilvaf/magrene.","code":"@Manual{,   title = {magrene: Motif Analysis In Gene Regulatory Networks},   author = {Fabrício Almeida-Silva and Yves {Van de Peer}},   year = {2022},   note = {R package version 0.99.1},   url = {https://github.com/almeidasilvaf/magrene}, }"},{"path":"/index.html","id":"magrene-","dir":"","previous_headings":"","what":"Motif Analysis In Gene Regulatory Networks","title":"Motif Analysis In Gene Regulatory Networks","text":"goal magrene identify analyze graph motifs containing duplicated genes gene regulatory networks (GRNs). Possible motifs include V, PPI V, lambda, delta, bifans. Motif frequencies can analyzed context gene duplications explore impact small-scale whole-genome duplications gene regulatory networks. Additionally, GRNs can tested motif enrichment comparing motif frequencies null distribution generated degree-preserving simulated GRNs. Finally, users can calculate interaction similarity gene pairs based Sorensen-Dice similarity index.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Motif Analysis In Gene Regulatory Networks","text":"Get latest stable R release CRAN. install magrene using Bioconductor following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"magrene\") BiocManager::install(\"almeidasilvaf/magrene\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Motif Analysis In Gene Regulatory Networks","text":"citation output using citation('magrene') R. Please run check updates cite magrene. Please note magrene made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('magrene'), bibtex = TRUE) #>  #> To cite package 'magrene' in publications use: #>  #>   Almeida-Silva F, Van de Peer Y (2022). _magrene: Motif Analysis In #>   Gene Regulatory Networks_. R package version 0.99.0, #>   <https://github.com/almeidasilvaf/magrene>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {magrene: Motif Analysis In Gene Regulatory Networks}, #>     author = {Fabrício Almeida-Silva and Yves {Van de Peer}}, #>     year = {2022}, #>     note = {R package version 0.99.0}, #>     url = {https://github.com/almeidasilvaf/magrene}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Motif Analysis In Gene Regulatory Networks","text":"Please note magrene project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Motif Analysis In Gene Regulatory Networks","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/calculate_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Z-score for motif frequencies — calculate_Z","title":"Calculate Z-score for motif frequencies — calculate_Z","text":"Calculate Z-score motif frequencies","code":""},{"path":"/reference/calculate_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Z-score for motif frequencies — calculate_Z","text":"","code":"calculate_Z(observed = NULL, nulls = NULL)"},{"path":"/reference/calculate_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Z-score for motif frequencies — calculate_Z","text":"observed list observed motif frequencies motif type. List elements must named 'lambda', 'bifan', 'V', 'PPI_V', 'delta' (necessarily order). nulls list null distributions motif type returned generate_nulls.","code":""},{"path":"/reference/calculate_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Z-score for motif frequencies — calculate_Z","text":"numeric vector Z-score motif type.","code":""},{"path":"/reference/calculate_Z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Z-score for motif frequencies — calculate_Z","text":"","code":"# Simulating it for test purposes null <- rnorm(1000, mean = 5, sd = 1) nulls <- list(     lambda = null, V = null, PPI_V = null, delta = null, bifan = null ) observed <- list(lambda = 7, bifan = 13, delta = 9, V = 5, PPI_V = 10) z <- calculate_Z(observed, nulls) # Check for motif enrichment (Z > 5) z[which(z > 5)] #>    bifan  #> 7.666668"},{"path":"/reference/find_bifan.html","id":null,"dir":"Reference","previous_headings":"","what":"Find bifan motifs — find_bifan","title":"Find bifan motifs — find_bifan","text":"Find bifan motifs","code":""},{"path":"/reference/find_bifan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find bifan motifs — find_bifan","text":"","code":"find_bifan(   edgelist = NULL,   paralogs = NULL,   lambda_vec = NULL,   count_only = FALSE )"},{"path":"/reference/find_bifan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find bifan motifs — find_bifan","text":"edgelist 2-column data frame regulators column 1 targets column 2. can ignored give lambda motifs parameter lambda_vec (recommended). paralogs 2-column data frame gene IDs paralog paralog pair. lambda_vec character lambda motifs returned find_lambda(). NULL, function find lambda motifs edgelist paralogs first. Passing previously identified lambda motifs make function much faster. count_only Logical indicating whether function return motif counts numeric scalar. FALSE, return character vector motifs. Default: FALSE.","code":""},{"path":"/reference/find_bifan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find bifan motifs — find_bifan","text":"character vector bifan motifs represented format regulator1, regulator2->target1, target2.","code":""},{"path":"/reference/find_bifan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find bifan motifs — find_bifan","text":"","code":"data(gma_grn) data(gma_paralogs) edgelist <- gma_grn[1:50000, 1:2] paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] paralogs <- rbind( paralogs, data.frame(duplicate1 = \"Glyma.01G177200\",             duplicate2 = \"Glyma.08G116700\") ) lambda_vec <- find_lambda(edgelist, paralogs) bifan <- find_bifan(paralogs = paralogs, lambda_vec = lambda_vec)"},{"path":"/reference/find_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Find delta motifs — find_delta","title":"Find delta motifs — find_delta","text":"Find delta motifs","code":""},{"path":"/reference/find_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find delta motifs — find_delta","text":"","code":"find_delta(   edgelist = NULL,   paralogs = NULL,   edgelist_ppi = NULL,   lambda_vec = NULL,   count_only = FALSE )"},{"path":"/reference/find_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find delta motifs — find_delta","text":"edgelist 2-column data frame regulators column 1 targets column 2. can ignored give lambda motifs parameter lambda_vec (recommended). paralogs 2-column data frame gene IDs paralog paralog pair. can ignored give lambda motifs parameter lambda_vec (recommended). edgelist_ppi 2-column data frame IDs genes encode protein interacting pair. lambda_vec character lambda motifs returned find_lambda(). NULL, function find lambda motifs edgelist paralogs first. Passing previously identified lambda motifs make function much faster. count_only Logical indicating whether function return motif counts numeric scalar. FALSE, return character vector motifs. Default: FALSE.","code":""},{"path":"/reference/find_delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find delta motifs — find_delta","text":"character vector lambda motifs represented format target1<-regulator->target2.","code":""},{"path":"/reference/find_delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find delta motifs — find_delta","text":"","code":"data(gma_grn) data(gma_paralogs) data(gma_ppi) edgelist <- gma_grn[500:1000, 1:2] # reducing for test purposes edgelist <- gma_grn[1:10000, 1:2] paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] edgelist_ppi <- gma_ppi lambda_vec <- find_lambda(edgelist, paralogs) motifs <- find_delta(edgelist_ppi = edgelist_ppi, lambda_vec = lambda_vec)"},{"path":"/reference/find_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Find lambda motifs — find_lambda","title":"Find lambda motifs — find_lambda","text":"Find lambda motifs","code":""},{"path":"/reference/find_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find lambda motifs — find_lambda","text":"","code":"find_lambda(edgelist = NULL, paralogs = NULL, count_only = FALSE)"},{"path":"/reference/find_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find lambda motifs — find_lambda","text":"edgelist 2-column data frame regulators column 1 targets column 2. paralogs 2-column data frame gene IDs paralog paralog pair. count_only Logical indicating whether function return motif counts numeric scalar. FALSE, return character vector motifs. Default: FALSE.","code":""},{"path":"/reference/find_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find lambda motifs — find_lambda","text":"character vector lambda motifs represented format target1<-regulator->target2.","code":""},{"path":"/reference/find_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find lambda motifs — find_lambda","text":"","code":"data(gma_grn) data(gma_paralogs) edgelist <- gma_grn[500:1000, 1:2] # reducing for test purposes paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] motifs <- find_lambda(edgelist, paralogs)"},{"path":"/reference/find_ppi_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Find V motifs in protein-protein interactions — find_ppi_v","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"Find V motifs protein-protein interactions","code":""},{"path":"/reference/find_ppi_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"","code":"find_ppi_v(edgelist = NULL, paralogs = NULL, count_only = FALSE)"},{"path":"/reference/find_ppi_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"edgelist 2-column data frame protein 1 column 1 protein 2 column 2. paralogs 2-column data frame gene IDs paralog paralog pair. count_only Logical indicating whether function return motif counts numeric scalar. FALSE, return character vector motifs. Default: FALSE.","code":""},{"path":"/reference/find_ppi_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"character vector V motifs represented format paralog1-partner-paralog2.","code":""},{"path":"/reference/find_ppi_v.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"function aims find number paralogous gene pairs share interaction partner.","code":""},{"path":"/reference/find_ppi_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find V motifs in protein-protein interactions — find_ppi_v","text":"","code":"data(gma_ppi) data(gma_paralogs) edgelist <- gma_ppi paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] motifs <- find_ppi_v(edgelist, paralogs)"},{"path":"/reference/find_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Find V motifs — find_v","title":"Find V motifs — find_v","text":"Find V motifs","code":""},{"path":"/reference/find_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find V motifs — find_v","text":"","code":"find_v(edgelist = NULL, paralogs = NULL, count_only = FALSE)"},{"path":"/reference/find_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find V motifs — find_v","text":"edgelist 2-column data frame regulators column 1 targets column 2. paralogs 2-column data frame gene IDs paralog paralog pair. count_only Logical indicating whether function return motif counts numeric scalar. FALSE, return character vector motifs. Default: FALSE.","code":""},{"path":"/reference/find_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find V motifs — find_v","text":"character vector V motifs represented format regulator1->target<-regulator2.","code":""},{"path":"/reference/find_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find V motifs — find_v","text":"","code":"data(gma_grn) data(gma_paralogs) edgelist <- gma_grn[2000:4000, 1:2] # reducing for test purposes paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] motifs <- find_v(edgelist, paralogs)"},{"path":"/reference/generate_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate null distributions of motif counts for each motif type — generate_nulls","title":"Generate null distributions of motif counts for each motif type — generate_nulls","text":"Generate null distributions motif counts motif type","code":""},{"path":"/reference/generate_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate null distributions of motif counts for each motif type — generate_nulls","text":"","code":"generate_nulls(   edgelist = NULL,   paralogs = NULL,   edgelist_ppi = NULL,   n = 1000,   bp_param = BiocParallel::SerialParam() )"},{"path":"/reference/generate_nulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate null distributions of motif counts for each motif type — generate_nulls","text":"edgelist 2-column data frame regulators column 1 targets column 2. paralogs 2-column data frame gene IDs paralog paralog pair. edgelist_ppi 2-column data frame IDs genes encode protein interacting pair. n Number degree-preserving simulated networks generate. Default: 1000. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam().","code":""},{"path":"/reference/generate_nulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate null distributions of motif counts for each motif type — generate_nulls","text":"list numeric vectors named lambda, delta, V, PPI_V, bifan, containing null distribution motif counts motif type.","code":""},{"path":"/reference/generate_nulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate null distributions of motif counts for each motif type — generate_nulls","text":"","code":"set.seed(123) data(gma_grn) data(gma_paralogs) data(gma_ppi) edgelist <- gma_grn[500:1000, 1:2] # reducing for test purposes paralogs <- gma_paralogs[gma_paralogs$type == \"WGD\", 1:2] edgelist_ppi <- gma_ppi n <- 2 # small n for demonstration purposes generate_nulls(edgelist, paralogs, edgelist_ppi, n) #> $lambda #> lambda lambda  #>      0      0  #>  #> $delta #> delta delta  #>     0     0  #>  #> $V #> V V  #> 0 0  #>  #> $PPI_V #> PPI_V PPI_V  #>   195   189  #>  #> $bifan #> bifan bifan  #>     0     0  #>"},{"path":"/reference/gma_grn.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample soybean GRN — gma_grn","title":"Sample soybean GRN — gma_grn","text":"GRN inferred BioNERO using expression data Libault et al., 2010, Severin et al., 2010.","code":""},{"path":"/reference/gma_grn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample soybean GRN — gma_grn","text":"","code":"data(gma_grn)"},{"path":"/reference/gma_grn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample soybean GRN — gma_grn","text":"3-column data frame node1, node2, edge weight.","code":""},{"path":"/reference/gma_grn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample soybean GRN — gma_grn","text":"Severin, . J., Woody, J. L., Bolon, Y. T., Joseph, B., Diers, B. W., Farmer, . D., ... & Shoemaker, R. C. (2010). RNA-Seq Atlas Glycine max: guide soybean transcriptome. BMC plant biology, 10(1), 1-16. Libault, M., Farmer, ., Joshi, T., Takahashi, K., Langley, R. J., Franklin, L. D., ... & Stacey, G. (2010). integrated transcriptome atlas crop model Glycine max, use comparative analyses plants. Plant Journal, 63(1), 86-99.","code":""},{"path":"/reference/gma_grn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample soybean GRN — gma_grn","text":"","code":"data(gma_grn)"},{"path":"/reference/gma_paralogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Soybean (Glycine max) duplicated genes — gma_paralogs","title":"Soybean (Glycine max) duplicated genes — gma_paralogs","text":"repertoire soybean paralogs retrieved Almeida-Silva et al., 2020.","code":""},{"path":"/reference/gma_paralogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soybean (Glycine max) duplicated genes — gma_paralogs","text":"","code":"data(gma_paralogs)"},{"path":"/reference/gma_paralogs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soybean (Glycine max) duplicated genes — gma_paralogs","text":"3-column data frame duplicate 1, duplicate 2, duplication type","code":""},{"path":"/reference/gma_paralogs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soybean (Glycine max) duplicated genes — gma_paralogs","text":"Almeida-Silva, F., Moharana, K. C., Machado, F. B., & Venancio, T. M. (2020). Exploring complexity soybean (Glycine max) transcriptional regulation using global gene co-expression networks. Planta, 252(6), 1-12.","code":""},{"path":"/reference/gma_paralogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soybean (Glycine max) duplicated genes — gma_paralogs","text":"","code":"data(gma_paralogs)"},{"path":"/reference/gma_ppi.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample soybean PPI network — gma_ppi","title":"Sample soybean PPI network — gma_ppi","text":"PPI retrieved STRING database filtered keep medium confidence edges nodes GRN.","code":""},{"path":"/reference/gma_ppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample soybean PPI network — gma_ppi","text":"","code":"data(gma_ppi)"},{"path":"/reference/gma_ppi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample soybean PPI network — gma_ppi","text":"2-column data frame node1 node2.","code":""},{"path":"/reference/gma_ppi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample soybean PPI network — gma_ppi","text":"","code":"data(gma_ppi)"},{"path":"/reference/nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Null distribution of motif frequencies for vignette data set — nulls","title":"Null distribution of motif frequencies for vignette data set — nulls","text":"Data filtered exactly demonstrated vignette. Briefly, top 30k edges GRN kept, WGD-derived gene pairs used.","code":""},{"path":"/reference/nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null distribution of motif frequencies for vignette data set — nulls","text":"","code":"data(nulls)"},{"path":"/reference/nulls.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Null distribution of motif frequencies for vignette data set — nulls","text":"list numeric vectors motif frequencies simulated network. List elements named lambda, delta, V, PPI_V, bifan, element length 100.","code":""},{"path":"/reference/nulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null distribution of motif frequencies for vignette data set — nulls","text":"","code":"data(nulls)"},{"path":"/reference/sd_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","title":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","text":"Calculate Sorensen-Dice similarity paralogous gene pairs","code":""},{"path":"/reference/sd_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","text":"","code":"sd_similarity(edgelist = NULL, paralogs = NULL)"},{"path":"/reference/sd_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","text":"edgelist 2-column data frame regulators column 1 targets column 2. paralogs 2-column data frame gene IDs paralog paralog pair.","code":""},{"path":"/reference/sd_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","text":"data frame containing paralogous gene pairs Sorensen-Dice similarity scores.","code":""},{"path":"/reference/sd_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Sorensen-Dice similarity between paralogous gene pairs — sd_similarity","text":"","code":"data(gma_ppi) data(gma_paralogs) edgelist <- gma_ppi paralogs <- gma_paralogs sim <- sd_similarity(edgelist, paralogs)"},{"path":"/news/index.html","id":"magrene-0990","dir":"Changelog","previous_headings":"","what":"magrene 0.99.0","title":"magrene 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""}]
